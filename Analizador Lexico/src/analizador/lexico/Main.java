/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizador.lexico;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
/**
 *
 * @author jhess
 */
public final class Main extends javax.swing.JFrame {
    DefaultTableModel model;
    DefaultTableModel model2;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        AgregarDatos(Simbolos,Lista);
        AgregarDatos(Registro,Reg);

        jButton1.setEnabled(false);
        model = new DefaultTableModel();
        
        model.addColumn("TOKEN");
        model.addColumn("LEXEMA");
        tableRW.setDragEnabled(false);
        tableRW.setFont(new Font("Nirmala UI",3,14));
        tableRW.setForeground(Color.black);
        tableRW.setBackground(new Color(0,255,120));
        this.tableRW.setModel(model);
        
        model2 = new DefaultTableModel();
        model2.addColumn("IDENTIFICADOR");
        model2.addColumn("DIRECCION");
        model2.addColumn("TIPO");
        model2.addColumn("DECLARADO EN");
        model2.addColumn("DIMENSION");
        model2.addColumn("SCOPE");
        this.TableSim.setModel(model2);
        
    }
    File Seleccionado;
    File Input = new File("Input.txt");
    File Simbolos = new File("Simbolos.txt");
    File Registro = new File("Registro.txt");
    File TextoPrueba = new File("Prueba.txt");
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TA2 = new java.awt.TextArea();
        TA1 = new java.awt.TextArea();
        jButton1 = new javax.swing.JButton();
        OPEN = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        TOut = new java.awt.TextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableRW = new javax.swing.JTable();
        JBAG = new javax.swing.JButton();
        JBEL = new javax.swing.JButton();
        txtoken = new javax.swing.JTextField();
        JBV = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txlexema = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableSim = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ANALIZADOR");

        TA2.setEditable(false);

        jButton1.setBackground(new java.awt.Color(0, 255, 204));
        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        OPEN.setText("ABRIR");
        OPEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OPENActionPerformed(evt);
            }
        });

        jButton3.setText("Texto Prueba");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        TOut.setBackground(new java.awt.Color(102, 102, 102));
        TOut.setEditable(false);
        TOut.setForeground(new java.awt.Color(255, 153, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(OPEN, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(TA1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TA2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(TOut, javax.swing.GroupLayout.PREFERRED_SIZE, 685, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(OPEN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TA2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(TA1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TOut, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Analizador", jPanel1);

        tableRW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableRW);

        JBAG.setText("Agregar");
        JBAG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAGActionPerformed(evt);
            }
        });

        JBEL.setText("ELIMINAR");
        JBEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBELActionPerformed(evt);
            }
        });

        txtoken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtokenActionPerformed(evt);
            }
        });

        JBV.setText("Ver \nPALABRAS \nRESERVADAS");
        JBV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBVActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Token");

        txlexema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txlexemaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("PALABRAS RESERVADAS");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Lexema");

        jButton2.setText("Guardar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(JBV)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtoken, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txlexema, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBAG, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBEL, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JBAG, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JBEL, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txlexema, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtoken, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JBV, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Palabras Reservadas", jPanel2);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("TABLA DE SIMBOLOS");

        TableSim.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(TableSim);

        jButton4.setText("VER");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tabla de Simbolos", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBVActionPerformed
        // TODO add your handling code here:
       //JBV.setEnabled(false);
       Abrir(Simbolos);
       RemoveDatos(tableRW,model);
        for(Tablas tb: Lista){
            String []info = new String[2];
            info[0] = tb.getToken();
            info[1] = tb.getLexema();
            model.addRow(info);
        }
    }//GEN-LAST:event_JBVActionPerformed

    private void txtokenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtokenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtokenActionPerformed

    private void JBELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBELActionPerformed
        // TODO add your handling code here:
        int Eliminate = tableRW.getSelectedRow();
        if(Eliminate>=0){
        model.removeRow(Eliminate);
        Lista.remove(Eliminate);
        }else{
            JOptionPane.showMessageDialog(null, "Seleccionar Fila");
        }
    }//GEN-LAST:event_JBELActionPerformed

    private void JBAGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAGActionPerformed
        // TODO add your handling code here:
        if(!txtoken.getText().trim().isEmpty()&&txtoken.getText().trim()!=null){
            if(!txlexema.getText().trim().isEmpty()&&txlexema.getText().trim()!=null){
                String elemento = txtoken.getText().trim();
                String elemento1 = txlexema.getText().trim();
                Lista.add(new Tablas(elemento,elemento1));
            }
        }else{
            JOptionPane.showMessageDialog(null, "Ingrese un dato válido", "ALERTA", 2);
        }
        RemoveDatos(tableRW,model);
        for(Tablas tb: Lista){
            String []info = new String[2];
            info[0] = tb.getToken();
            info[1] = tb.getLexema();
            model.addRow(info);
        }
    }//GEN-LAST:event_JBAGActionPerformed
    StyleContext sc = new StyleContext();
    final Style redStyle = sc.addStyle("RED", null);
    final DefaultStyledDocument doc = new DefaultStyledDocument(sc);
        
    public void Outp() throws BadLocationException{
        redStyle.addAttribute(StyleConstants.Foreground, Color.red);
//        
//        int start = jTextPane1.getText().length();
//        Style style = null;
//        jTextPane1 = new JTextPane(doc);
//        String o = "";
//        
//        for(int x=0;x<Output.size();x++) {
//            if(Output.get(x).getTipoError().contentEquals("Error Crítico")){
//                o +="\033[31m"+ Output.get(x).getTipoError()+" -> "+Output.get(x).getDescrip() + "\n";            
//               // TOut.setForeground(Color.red);
//                style = redStyle;
//                doc.insertString(start, o + " ", style);
//                //TOut.setText(o);
//                System.out.println("\033[31m"+ Output.get(x).getTipoError()+" -> "+Output.get(x).getDescrip() + "\n");
//            }
//            if(Output.get(x).getTipoError().contentEquals("Advertencia")){
//                o += "\033[33m"+ Output.get(x).getTipoError()+" -> "+Output.get(x).getDescrip() + "\n";            
//               // TOut.setForeground(Color.yellow);
//                TOut.setText(o);
//            }
//        }
//        
        
//        doc.insertString(0, str, null);
//                // Add the text to the document
//        doc.insertString(0, text, null);
//
//        // Finally, apply the style to the heading
//        doc.setParagraphAttributes(0, 1, heading2Style, false);
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Output.clear();
        TOut.setText("");
        Separador.clear();
        Lexemas.clear();
        Simbo.clear();
        STATIC=0;
        String Save = TA1.getText();
        if(!Save.isEmpty()){
            guardar(Save,Input);
            fase1(Input);
        }else if(Seleccionado.exists()){
            fase1(Seleccionado);
        }
        String it="";
        for(int x=0;x<Lexemas.size();x++) {
            it += Lexemas.get(x) + "\n";
        }
        TA2.setText(it);
        String o = "";
        for(int x=0;x<Output.size();x++) {
            if(Output.get(x).getTipoError().contentEquals("Error Crítico")){
                o += Output.get(x).getTipoError()+" -> "+Output.get(x).getDescrip() + "\n";            
               // TOut.setForeground(Color.red);
                TOut.setText(o);
                System.out.println("\033[31m"+ Output.get(x).getTipoError()+" -> "+Output.get(x).getDescrip() + "\n");
            }
            if(Output.get(x).getTipoError().contentEquals("Advertencia")){
                o += Output.get(x).getTipoError()+" -> "+Output.get(x).getDescrip() + "\n";            
               // TOut.setForeground(Color.yellow);
                System.out.println("\033[33m"+ Output.get(x).getTipoError()+" -> "+Output.get(x).getDescrip() + "\n");
               TOut.setText(o);
            }
        }
        
        String nombre="UNKNOWN";
        for(int i=0; i<32 ;i++){
        System.out.println(i +" -> " +Integer.toHexString(i));            
        }
        for(Simbolos s:Simbo){
            if(s.getTipo().contentEquals("programa")){
                nombre = s.getIde().toUpperCase();
            }
        }
        CodigoHEX(nombre);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txlexemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txlexemaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txlexemaActionPerformed
   
    ArrayList<String> ta = new ArrayList<>();
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         String b = "";
        for(Tablas tb: Lista){
            b += tb.getToken()+"\t"+tb.getLexema()+"\n";
        }
        guardar(b,Simbolos);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void OPENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OPENActionPerformed
        // TODO add your handling code here:
        TA1.setText("");
        JFileChooser fc = new JFileChooser();
        int valor = fc.showOpenDialog(fc);
        
        if(valor== JFileChooser.APPROVE_OPTION){
            Seleccionado = fc.getSelectedFile();    
            String lec = Lector(Seleccionado);
            TA1.setText(lec);
            jButton1.setEnabled(true);
        }
    }//GEN-LAST:event_OPENActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Seleccionado = TextoPrueba;
        String lector = Lector(Seleccionado);
        TA1.setText(lector);
        jButton1.setEnabled(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        RemoveDatos(TableSim,model2);
        for(Simbolos tb: Simbo){
            String []info = new String[6];
            info[0] = tb.getIde();
            info[1] = tb.getDirec();
            info[2] = tb.getTipo();
            info[3] = tb.getDecla();
            info[4] = Integer.toString(tb.getDimension());
            info[5] = Integer.toString(tb.getScope());
            model2.addRow(info);
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    ArrayList<String> Separador = new ArrayList<>();
    ArrayList<String> Lexemas = new ArrayList<>();
    ArrayList<Tablas> Lista = new ArrayList<>();
    ArrayList<Tablas> Reg = new ArrayList<>();
    ArrayList<Simbolos> Simbo = new ArrayList<>();
    ArrayList<Output> Output = new ArrayList<>();
    
    
    public void Errores(){
        for (int i = 0; i < Simbo.size(); i++) {
            //int a=-1;
            for (int j = 0; j < Simbo.size(); j++) {
                if(i!=j){
                    if(Simbo.get(i).getIde().equals(Simbo.get(j).getIde())&&Simbo.get(i).getTipo().equals(Simbo.get(j).getTipo())&&Simbo.get(i).getDecla().equals(Simbo.get(j).getDecla())&&Simbo.get(i).getScope()==Simbo.get(j).getScope()){
                        //JOptionPane.showMessageDialog(null,"La variable \""+Simbo.get(i).getIde()+"\" ya esta declarada en el scope","ERROR",0);
                        Output.add(new Output("Error Crítico","La variable \""+Simbo.get(i).getIde()+"\" ya esta declarada en el scope"));
                    }
                    if(Simbo.get(i).getIde().equals(Simbo.get(j).getIde())
                        && !Simbo.get(i).getTipo().isBlank()&& !Simbo.get(j).getTipo().isBlank()
                        &&  Simbo.get(i).getScope()==Simbo.get(j).getScope()
                        && !Simbo.get(i).getTipo().equals(Simbo.get(j).getTipo())){
                         //JOptionPane.showMessageDialog(null,"La variable "+Simbo.get(i).getTipo()+" \""+ Simbo.get(i).getIde()+"\" YA SE HA DECLARADO","ERROR",0);
                        Output.add(new Output("Error Crítico","La variable "+Simbo.get(i).getTipo()+" \""+ Simbo.get(i).getIde()+"\" YA SE HA DECLARADO"));

                    }
                }
            }
        }
    }
    
    public void ErroresTipos(){
        String P = "";
        String Q = "";
        int x=0;
        double y;
        y=x;
        for (int i = 0; i < Simbo.size(); i++) {
            if(Declarado.contains(Simbo.get(i).getIde())){
                int in = Declarado.indexOf(Simbo.get(i).getIde());
                    if(Simbo.get(i).getIde().equals(Declarados.get(in).getIde())
                            &&Simbo.get(i).getTipo().isBlank()&&!Simbo.get(in).getTipo().isBlank()
                            &&Simbo.get(i).getScope()>=Declarados.get(in).getScope()
                            ){
                    if(STATUSPORT(Simbo.get(i).getDecla())) Q ="ASM";
                    if(Numero(Simbo.get(i).getDecla()))Q ="int";
                    if(Double(Simbo.get(i).getDecla()))Q ="double";
                    if(Caracteres(Simbo.get(i).getDecla())) Q ="String";
                    if(Char(Simbo.get(i).getDecla())) Q ="char";
                    
                    if(Declarado.contains(Simbo.get(i).getDecla())){
                        int in2 = Declarado.indexOf(Simbo.get(i).getDecla());
                        Q = Declarados.get(in2).getTipo();
                    }	
                    if(Declarados.get(in).getTipo().equals("double")&&Q.equals("int")){
                    }else if(Declarados.get(in).getTipo().equals("ASM")&&Q.equals("int")){
                    }
                    else{
                    
                        if(!Declarados.get(in).getTipo().equals(Q))
   
//                        JOptionPane.showMessageDialog(null,"Existe un conflicto con la Variable \""+Simbo.get(i).getIde()+"\" de tipo \""+
//                                            Declarados.get(in).getTipo()+ "\" ESTA DECLARADA COMO TIPO \""+Q+ "\"","ERROR",0);
                        Output.add(new Output("Error Crítico","Existe un conflicto con la Variable \""+Simbo.get(i).getIde()+"\" de tipo \""+
                                            Declarados.get(in).getTipo()+ "\" ESTA DECLARADA COMO TIPO \""+Q+ "\""));
                        
                            Q = "";
                        }
                    }
                    
                    
                if(!Simbo.get(i).getTipo().isBlank()&&!Simbo.get(i).getDecla().isBlank()){
                    if(Numero(Simbo.get(i).getDecla()))P ="int";
                    if(Double(Simbo.get(i).getDecla()))P ="double";
                    if(Caracteres(Simbo.get(i).getDecla())) P ="String";
                    if(Char(Simbo.get(i).getDecla())) P ="char";
                    if(STATUSPORT(Simbo.get(i).getDecla())) P ="ASM";
                    if(Declarados.get(in).getTipo().equals("double")&&Q.equals("int")){
                    }else if(Declarados.get(in).getTipo().equals("ASM")&&Q.equals("int")){
                    }
                    else{
                    if(!Simbo.get(i).getTipo().equals(P))
//                        JOptionPane.showMessageDialog(null,"Existe un conflicto con la Variable \""+Simbo.get(i).getIde()+"\" de tipo \""+
//                                                            Simbo.get(i).getTipo()+ "\" ESTA DECLARADA COMO TIPO \""+P+ "\"","ERROR",0);
                    Output.add(new Output("Error Crítico","Existe un conflicto con la Variable \""+Simbo.get(i).getIde()+"\" de tipo \""+
                                                            Simbo.get(i).getTipo()+ "\" ESTA DECLARADA COMO TIPO \""+P+ "\""));                                        
                    P = "";
                    }
                }                
            }
        }
    }
    
    ArrayList<Simbolos> Declarados = new ArrayList<>();
    ArrayList<String> Declarado = new ArrayList<>();
    ArrayList<String> Inicializado = new ArrayList<>();
    Declaraciones Declaraciones;
    ArrayList<Declaraciones> Declarac = new ArrayList<>();

    public Declaraciones getDeclaraciones() {
        return Declaraciones;
    }

    public void setDeclaraciones(Declaraciones Declaraciones) {
        this.Declaraciones = Declaraciones;
    }
    
    public void DeclaracionPrevia(){
        Declarados.clear();
        Declarado.clear();
        Inicializado.clear();

        for (int i = 0; i < Simbo.size(); i++) {
            if(!Simbo.get(i).getTipo().isBlank()){
                Declarados.add(Simbo.get(i));
                Declarado.add(Simbo.get(i).getIde());
                Declarac.add(new Declaraciones(Simbo.get(i).getIde(),Declarado));
                //Declaraciones.setIdentificador(Simbo.get(i).getIde());
            }else {Declarados.add(new Simbolos("","","","",0,0));
                    Declarado.add("");              
            }
            
            if(!Simbo.get(i).getDecla().isBlank()||Simbo.get(i).getTipo().equals("programa")){
                    Inicializado.add(Simbo.get(i).getIde());
            } 
        }
        for (int i = 0; i < IDE_error.size(); i++) {
            if(!Declarado.contains(IDE_error.get(i).getIde()))
                //JOptionPane.showMessageDialog(null,"El Identificador \""+IDE_error.get(i).getIde()+"\" NO ES UNA DECLARACIÓN","ERROR",0);
                Output.add(new Output("Error Crítico","El Identificador \""+IDE_error.get(i).getIde()+"\" NO ES UNA DECLARACIÓN"));

        }
        for (int f = 0; f < Simbo.size(); f++) {
            if(Declarado.contains(Simbo.get(f).getIde())){
                if(!Inicializado.contains(Simbo.get(f).getIde())) 
                    //JOptionPane.showMessageDialog(null,"Variable \""+Simbo.get(f).getIde()+"\" NO INICIALIZADA","ADVERTENCIA",2);
//                    System.out.println("Variable "+ Simbo.get(f).getIde()+" NO INICIALIZADA");
                Output.add(new Output("Advertencia","Variable \""+Simbo.get(f).getIde()+"\" NO INICIALIZADA"));

                for(int g=0; g < Declarados.size(); g++){
                    if(Simbo.get(f).getIde().equals(Declarados.get(g).getIde())
                            &&Simbo.get(f).getTipo().isBlank()&&!Simbo.get(g).getTipo().isBlank()
                            &&Simbo.get(f).getScope()<=Declarados.get(g).getScope()
                            &&g>f){
                            //JOptionPane.showMessageDialog(null,"La variable "+Simbo.get(f).getTipo() +" \""+Simbo.get(f).getIde()+"\" no se ha declarado","ERROR",0); 
                            Output.add(new Output("Advertencia","La variable "+Simbo.get(f).getTipo() +" \""+Simbo.get(f).getIde()+"\" no se ha declarado"));

                        }                                    
                    }
                }else Output.add(new Output("Advertencia","La variable \""+ Simbo.get(f).getIde()+"\" no se ha declarado"));
            //JOptionPane.showMessageDialog(null,"La variable \""+ Simbo.get(f).getIde()+"\" no se ha declarado","ERROR",0);
            }
        }
/*            if(!Simbo.get(i).getTipo().isBlank()){
                declarado = true;
                scopede = Simbo.get(i).getScope();
            }
            for (int j = 0; j < Simbo.size(); j++) {
                if(i!=j && declarado == false){
                    if(Simbo.get(i).getIde().equals(Simbo.get(j).getIde())&&Simbo.get(j).getScope()>=scopede){
                        
                    }else {JOptionPane.showMessageDialog(null,"La variable no se ha declarado","ERROR",0);
                        break;
                    }
                }
            }*/
        
    
    
    public void setSimbo(ArrayList<Simbolos> Simbo) {
        this.Simbo = Simbo;
    }

    public ArrayList<Simbolos> getSimbo() {
        return Simbo;
    }
    
    public ArrayList<Tablas> getLista() {
        return Lista;
    }

    public void setLista(ArrayList<Tablas> Lista) {
        this.Lista = Lista;
    }

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    
    //LEE EL ARCHIVO SELECCIONADO
    public String Lector(File a){
        String texto="";
        String b= "";
        int fila = 0;
        try {
            FileReader Fr = new FileReader(a);
            BufferedReader Br = new BufferedReader(Fr);    
            while ((b = Br.readLine()) != null) {
            fila++;
            texto += b + "\n";
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "No se Encontro", HEIGHT);
        }
        return texto;
    }
    
    //GUARDA EL TEXTO EN UN ARCHIVO TXT
    public void guardar(String texto,File a) {
        String cadena=texto;
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(a));
            bw.write("");
            try (FileWriter FlWr = new FileWriter(a, true)) {
                FlWr.write(cadena);
            }
        } catch (IOException e) {
            System.out.println("Error");
        }
    }
    
    //ABRE EL ARCHIVO EN CURSO
    public void Abrir(File F){
    try{
            Desktop.getDesktop().open(F);
        }catch(Exception e){
        System.out.println(e);}
    }
    
    //FUNCION FASE 1: SEPARA PALABRAS DE SIMBOLOS
    
    public void fase1(File arch){
        System.out.println("Scope -> "+sp);
        sp=0;
        int numlinea=0;
        String text="";
        String a;
        int ant=0;
        try{
            FileReader Fr = new FileReader(arch);
            BufferedReader Br = new BufferedReader(Fr);
            while((a = Br.readLine())!= null) { //GUARDA LO LEIDO DE UNA LINEA               
                a=a+" ";
                String i=" ";
                
                for(int x=0;x<a.length();x++){
                    char c = a.charAt(x);
                    
                    String regexIde = "([a-zA-Z]|[0-9])"; //EXPRESION REGULAR PARA SEPARAR PALABRAS DE SIMBOLOS
                    if(Pattern.matches(regexIde, String.valueOf(c))==true){ //DEVUELVE SI SE CUMPLE LA EXPRESION REGULAR
                        text += String.valueOf(c); //GUARDA EL CARACTER Y LO CONCATENA  
                        i = String.valueOf(c);
                    }else 
                        if(!(a+1).isEmpty()&&a.charAt(x)=='/'&&a.charAt(x+1)=='/'){
                        for(int s=x;s<a.length();s++){
                            text += a.charAt(s);
                        }
                        Separador.add(text);
                        text="";
                        break;
                    }else
                        {
                    if(a.charAt(x)=='+'&&a.charAt(x+1)=='='
                            ||a.charAt(x)=='='&&a.charAt(x+1)=='='
                            ||a.charAt(x)=='!'&&a.charAt(x+1)=='='
                            ||a.charAt(x)=='>'&&a.charAt(x+1)=='='
                            ||a.charAt(x)=='<'&&a.charAt(x+1)=='='
                            ||a.charAt(x)=='&'&&a.charAt(x+1)=='&'
                            ||a.charAt(x)=='<'&&a.charAt(x+1)=='<'
                            ||a.charAt(x)=='|'&&a.charAt(x+1)=='|'
                            ||a.charAt(x)=='>'&&a.charAt(x+1)=='>'
                            ||a.charAt(x)=='/'&&a.charAt(x+1)=='*'
                            ||a.charAt(x)=='*'&&a.charAt(x+1)=='/'
                            ||a.charAt(x)=='+'&&a.charAt(x+1)=='+'
                            ||a.charAt(x)=='-'&&a.charAt(x+1)=='-'
                            ||a.charAt(x)=='-'&&a.charAt(x+1)=='>'
                            ||a.charAt(x)=='-'&&a.charAt(x+1)=='='){
                        Separador.add(text);
                        text="";
                        char d=a.charAt(x+1);
                        Separador.add(String.valueOf(c)+String.valueOf(d));
                        x++;
                        continue;
                        
                    }if(c!=' '){
                            if(!"".equals(text)){                        
                                Separador.add(text);
                            }
                        
                        text = String.valueOf(c);
                        Separador.add(text);
                        text="";
                    }
                        if(c==' '&&!" ".equals(i)){ 
                            if(!"".equals(text)){                        
                                Separador.add(text);
                            }

                        text ="";        
                        }
                    
                       if(x==0){ 
                       numlinea++;
                       int sep = Separador.size();
                       if(!Separador.isEmpty()){
                        for(int m=sep-1;m>=ant;m--) {
                            Scope(m, numlinea);
                        }
                        ant = sep;
                        //if(sp!=0) System.out.println("Valio en "+numlinea);
                       }
                   }                             
                    }
                    
                }
            }
        }catch(IOException e){System.out.print(e);}
        sp=0;
        OptSeparadorPuertos();
        OptSeparadorDouble();
        OptSeparadorCaracteres();
        OptSeparadorChar();
        Comprobacion();
        Errores();
        DeclaracionPrevia();
        ErroresTipos();
        //Juntar(1);
    }

    public void AgregarDatos(File f,ArrayList<Tablas> List){
        List.clear();
        String a= "";
        String text="";
        String token="";
        try {
            FileReader Fr = new FileReader(f);
            BufferedReader Br = new BufferedReader(Fr);    
            while ((a = Br.readLine()) != null) {       
                 for(int x=0;x<a.length();x++){
                    char c= a.charAt(x);
                    var regex = "\t";
                    if(!Pattern.matches(regex,String.valueOf(c))){ 
                        text += String.valueOf(c);
                    }else{
                        token=text;
                        text="";
                    }
                 }
                 List.add(new Tablas(token,text));
                 text="";
            }
            token="";
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No se Encontro el Archivo","ERROR", 2);
        }
    }
    
    public void RemoveDatos(JTable tb, DefaultTableModel db){
     int fil = tb.getRowCount();
        if(fil>=0){
            for(int x =fil-1; x>=0;x--){
                db.removeRow(x);
            }
        }
    }
    

    public void OptSeparadorDouble(){
         for(int i = 2; i < Separador.size();i++) {
            String num = "[0-9]+";
            if(!Separador.get(i-1).isEmpty()&&Separador.get(i).equals(".")&&Separador.get(i-1).matches(num)&&!Separador.get(i+1).isEmpty()){
                Separador.set(i-1, Separador.get(i-1)+"."+Separador.get(i+1));
                Separador.remove(i+1); Separador.remove(".");
                if("-".equals(Separador.get(i-2))){
                    Separador.set(i-1, "-"+Separador.get(i-1));
                    Separador.remove("-");
                }
            }
         }
    }
    
    ArrayList<Registro> Regi = new ArrayList<>();
    public void OptSeparadorPuertos(){
         for(int i = 1; i < Separador.size();i++) {
            String num = "PORT(A|B)";
            String asig = "[0-7]";
            if(Separador.size()>0){
                if(!Separador.get(i-1).isEmpty()&&Separador.get(i).equals(".")&&Separador.get(i-1).matches(num)){
                    if(!Separador.get(i+1).isEmpty()&&Separador.get(i+1).matches(asig)){
                    Separador.set(i-1, Separador.get(i-1)+"."+Separador.get(i+1));
//                    Set<Registro> set = new HashSet<>(Regi);
//                    Regi.clear();
//                    Regi.addAll(set);
                    for(Tablas re: Reg){
                        if(Regi.size()>0){
                            for(Registro r: Regi){
                                if(re.getToken().contentEquals("."+Separador.get(i+1))&& !r.getRegistro().contains(Separador.get(i-1))){
                                    Regi.add(new Registro(Separador.get(i-1),re.getLexema()));
                                }                        
                            }                            
                        }else{
                            if(re.getToken().contentEquals("."+Separador.get(i+1))){
                                    Regi.add(new Registro(Separador.get(i-1),re.getLexema()));
                            }
                        }
                    }
                    
                    Separador.remove(i+1);
                    Separador.remove(i);
                    
                }else Output.add(new Output("Error Crítico", "PUERTO FUERA DE RANGO"));
            }
            }
         }
    }
    
    
    public void OptSeparadorCaracteres(){
         for(int i = 1; i < Separador.size()-1;i++) {
            if(Separador.get(i).equals("\"")&&!Separador.get(i+1).isEmpty()){
                int x=i;
                String ini ="";
                   do{
                        ini += Separador.get(x)+" ";
                        x++;
                        if(Separador.get(x).equals("\"")){
                            ini += Separador.get(x);
                            Separador.remove(x);
                            break;
                        }
                    }while(!"\"".equals(Separador.get(x)));
                Separador.set(i, ini);
                for(int m=i;m<x-1;m++){
                    Separador.remove(i+1);
                }
                
            }
         }
    }
    
    public void OptSeparadorChar(){
         for(int i = 2; i < Separador.size()-1;i++) {
            if(Separador.get(i-2).equals("\'")&&Separador.get(i).equals("\'")){
                Separador.set(i, "\'"+Separador.get(i-1)+"\'");
                    Separador.remove(i-1);
                    Separador.remove(i-2);
            }
         }
    }
    public String ide(int x){
        String res="";
        for(Tablas tb:Lista){
            if(x>0){
                if(Separador.get(x-1).equals(tb.getToken())&&Identificador(Separador.get(x-1))){
                   res = tb.getToken();
                }            
            }
        }
        return res;
    }
    
    public String Declaradoen(int x){
        String res="";
        for(Tablas tb:Lista){
            if(x<(Separador.size()+1)){
                try{
                    if(Separador.get(x+1).equals("=")){
                        int h=(x+2);
                        while(!";".equals(Separador.get(h))){
                            res += Separador.get(h);
                            h++;
                        }
                        break;
    //                   res = Separador.get(x+2);
                    }
                }catch(Exception e){ Output.add(new Output("Error Crítico",e+" "+"FALTA TERMINAL ;")); break;}
            }
        }
        return res;
    }
    public boolean Devices(int x) {
        boolean status = false;
        if(Separador.size()>0){
            if (Separador.get(x-1).contentEquals("Device")){
                status = true;
            }
        }
    return status;
    }
    
    public boolean PORT(String lexema) {
    String regexIde = "(PORT(A|B)([.]([0-7]))?)|(TRIS(A|B))"; //EXPRESION REGULAR PARA PUERTOS
    return lexema.matches(regexIde);
    }
    public boolean STATUSPORT(String lexema){
    String regexN = "0|1"; //EXPRESION REGULAR PARA PUERTOS        
    return lexema.matches(regexN);
    }
    
    public boolean Identificador(String lexema) {
    String regexIde = "([a-zA-Z]+[0-9]*?)"; //EXPRESION REGULAR PARA IDENTIFICADORES
    return lexema.matches(regexIde);
    }

    public boolean Numero(String lexema) {
    String regexIde = "([0-9]+)"; //EXPRESION REGULAR PARA IDENTIFICADORES
    return lexema.matches(regexIde);
    }
    
    public boolean Double(String lexema) {
    String regexIde = "(^-?[0-9]+.[0-9]+)"; //EXPRESION REGULAR PARA IDENTIFICADORES
    return lexema.matches(regexIde);
    }
    
    public boolean Caracteres(String lexema){
    String regexIde = "^\"\\X*\"$";
    return lexema.matches(regexIde);
    }
    
    public boolean Char(String lexema){
    String regexIde = "^\'\\X\'$";
    return lexema.matches(regexIde);
    }
    
    public boolean Comentario(String lexema){
    String regexIde = "^(//)\\X*";
    
    return lexema.matches(regexIde);
    }
    
    //METODOS PARA COMPROBAR E CON EXPRESIONES REGULARES
    public void Comprobacion(){
        for(int x=0;x<Separador.size();x++) {
                WordR(x);
                if(WR!=true){
                    if(Devices(x)){
                    Lexemas.add("< "+Separador.get(x)+" , "+"Devices >");
                    TabSimb(x);
                }else if(PORT(Separador.get(x))){
                    Lexemas.add("< "+Separador.get(x)+" , "+"PUERTOS >");
                    TabSimb(x);
                }else if(Identificador(Separador.get(x))){
                    Lexemas.add("< "+Separador.get(x)+" , "+"ID >");
                    TabSimb(x);
                }else if(Numero(Separador.get(x))){
                    Lexemas.add("< "+Separador.get(x)+" , "+"INT >"); 
                }else if(Double(Separador.get(x))){
                    Lexemas.add("< "+Separador.get(x)+" , "+"Double >");
                }else if(Caracteres(Separador.get(x))){
                    Lexemas.add("< "+Separador.get(x)+" , "+"String >");
                }else if(Comentario(Separador.get(x))){
                    Lexemas.add("< "+Separador.get(x)+" , "+"Comentario >");
                }else if(Char(Separador.get(x))){
                    Lexemas.add("< "+Separador.get(x)+" , "+"Caracter >");
                }
            }
        }
        if(sp!=0) Output.add(new Output("Error Crítico","Incopatibilidad de Scope"));
 
            //JOptionPane.showMessageDialog(null,"Incopatibilidad de Scope", "Error", HEIGHT);
    }
    ArrayList<Simbolos>  IDE_error = new ArrayList<>();
    int STATIC=0;
    public void TabSimb(int x){
        if(!"".equals(ide  (x))||!"".equals(Declaradoen(x))){
            int dimension=0;
            String P = ide(x);
          /*  if(Numero(Declaradoen(x)))P ="int";
            if(Double(Declaradoen(x))) P ="double";
            if(Caracteres(Declaradoen(x))) P ="string";
            if(Char(Declaradoen(x))) P ="char";
          */
            if(ide(x).equals("int")){ STATIC+=4;
            }else if(ide(x).equals("byte")){ STATIC+=1;
            }else if(ide(x).equals("short")){ STATIC+=2;
            }else if(ide(x).equals("long")){ STATIC+=8;
            }else if(ide(x).equals("float")){ STATIC+=4;
            }else if(ide(x).equals("char")){ {STATIC+=1; dimension = Declaradoen(x).length()-2;}
            }else if(ide(x).equals("double")){ STATIC+=8;
            }else if(ide(x).equals("String")){STATIC+=Declaradoen(x).length(); dimension = Declaradoen(x).length();
            }else if(ide(x).isBlank() && PORT(Separador.get(x))){ P="ASM"; STATIC+=1;}
            Simbo.add(new Simbolos(Separador.get(x),"STATIC+"+(STATIC),P,Declaradoen(x),dimension,sp));            
        } else if(ide(x).equals("")&&x<Separador.size()&&Separador.get(x+1).equals(";"));
            //JOptionPane.showMessageDialog(null,"El Identificador \""+Separador.get(x)+"\" NO ES UNA DECLARACIÓN","ERROR",0); 
            //IDE_error.add(new Simbolos(Separador.get(x),"NULL","NULL","NULL",0,sp));                
    }
    
    /*
                int dimension=0;
            String P = ide(x);
            if(Numero(Declaradoen(x)))P ="int";
            if(Double(Declaradoen(x))) P ="double";
            if(Caracteres(Declaradoen(x))) P ="string";
            if(Char(Declaradoen(x))) P ="char";
            
            if(ide(x).equals("int")){ if(STATIC!=0) STATIC+=4;
            }else if(ide(x).equals("byte")){ if(STATIC!=0) STATIC+=1;
            }else if(ide(x).equals("short")){ if(STATIC!=0) STATIC+=2;
            }else if(ide(x).equals("long")){ if(STATIC!=0) STATIC+=8;
            }else if(ide(x).equals("float")){ if(STATIC!=0) STATIC+=4;
            }else if(ide(x).equals("char")){ if(STATIC!=0) {STATIC+=1; dimension = 1;}
            }else if(ide(x).equals("double")){ if(STATIC!=0) STATIC+=8;
            }else if(ide(x).equals("String")){if(STATIC!=0) {STATIC+=Declaradoen(x).length()-4; dimension = Declaradoen(x).length()-4;}
            }else if(ide(x).isBlank());
            if(STATIC ==0){
            Simbo.add(new Simbolos(Separador.get(x),"STATIC+"+(STATIC),P,Declaradoen(x),dimension));
            STATIC+=1;
            }else{
            Simbo.add(new Simbolos(Separador.get(x),"STATIC+"+(STATIC),P,Declaradoen(x),dimension));
            }
        } 
    */
    public void Juntar(int x){
    int ite =x;
    int ite1=0;
    for(Simbolos s: Simbo){
            if(Simbo.get(ite).getIde().hashCode()==s.getIde().hashCode()&&ite1>=0){
                ite1++;
                s.setDirec(Simbo.get(ite).getDirec());
                s.setTipo(Simbo.get(ite).getTipo());   
            }       
        }
    Simbo.remove(ite);
    }
    
    boolean WR;

    public void WordR(int i){        
        for(Tablas tb: Lista){
         if(Separador.get(i).equals(tb.getToken())){
                Lexemas.add("< "+Separador.get(i)+" , "+tb.getLexema()+" >");
                WR=true; break;
            }else WR = false;  
        }
        
        if(Separador.get(i).equals("{")){
            sp++;
            System.out.println("Scope { -> "+sp);
        }else if(Separador.get(i).equals("}")){
            sp--;
            if(sp<=0)
            System.out.println("Scope } -> "+sp);
        }
    }
    
    int sp=0;
    int spabierto=0;
    int spcerrado=0;
    int spgeneral=0;
    int contsp=-1;
    public void Scope(int i, int j){
    
//        if(Separador.get(i).equals("{")){
//            spabierto++;
//            sp++;
//            
//        if(contsp>0){
//            sp = spgeneral+1;
//        }else    spgeneral = sp;
//            System.out.println("Scope { -> "+sp +" En linea -> "+ j);
//        }else if(Separador.get(i).equals("}")){
//            spcerrado++;
//            if(spcerrado<sp){
//                sp--;
//            }
//            if(sp<=0) j++;
//            System.out.println("Scope } -> "+sp +" En linea -> "+ j);
//            if(sp==0){
//            contsp++;
//            }
//        }
    }
    File HEX;
    public void CodigoHEX(String nombre){
        String codigo="";  
        HEX = new File(nombre+".HEX");
        codigo+=":0400 0000 0128 06 14 B9\n";
        codigo+=ArchivoHEX();
          if(Simbo.contains("Device")){
            int pos = Simbo.indexOf("Device");
            if(Simbo.get(pos).getIde().contentEquals("16F628A")){
                codigo+=":02400E00223F4F\n";        
            } 
          }
       codigo+=":00000001FF";
       guardar(codigo,HEX);
    }
    
    public String ArchivoHEX(){
        String cadena="0128";
        String linea="";
        String text="0128";
        int cnt = 0;
        System.out.println(Regi.size());
        System.out.println(Simbo.size());

//        for(Simbolos s:Simbo){
//            for(Registro r: Regi){
//                if(s.getIde().contains(r.getRegistro())){
//                    if(cadena.length()>31){
//                        linea= cadena;
//                        text+="\n";
//                        cadena="";
//                    }else{
//                        if(PORT(s.getIde()) && s.getDecla().matches("0|1")){
//                            if(s.getDecla().equals("1")){
//                                cadena+=r.getCodigo()+"14";
//                                text+=r.getCodigo()+"14";
//                            }else {cadena+=r.getCodigo()+"01"; text+=r.getCodigo()+"01";}                            
//                        }else {cadena+=r.getCodigo(); text+=r.getCodigo();}
//                    }
//                }
//            }
//        }
        for(int i =0;i < Simbo.size(); i++){
            for(Registro r: Regi){
                
                if(Simbo.get(i).getIde().contentEquals(r.getRegistro())){
                    System.out.println(i+" "+r.getRegistro());
                    if(cadena.length()>31){
                        linea= cadena+"B9";
                        text+="\n";
                        cadena="";
                    }else{
                        if(PORT(Simbo.get(i).getIde()) && Simbo.get(i).getDecla().matches("0|1")){
                            if(Simbo.get(i).getDecla().equals("1")){
                                cadena+=r.getCodigo()+"14";
                                text+=r.getCodigo()+"14";
                            }else {cadena+=r.getCodigo()+"01"; text+=r.getCodigo()+"01";}                            
                        }else {cadena+=r.getCodigo(); text+=r.getCodigo();}
                    }
                }
            }
        }
        return text+"\n";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBAG;
    private javax.swing.JButton JBEL;
    private javax.swing.JButton JBV;
    private javax.swing.JButton OPEN;
    private java.awt.TextArea TA1;
    private java.awt.TextArea TA2;
    private java.awt.TextArea TOut;
    private javax.swing.JTable TableSim;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tableRW;
    private javax.swing.JTextField txlexema;
    private javax.swing.JTextField txtoken;
    // End of variables declaration//GEN-END:variables
}
